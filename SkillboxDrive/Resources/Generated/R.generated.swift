//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `Accept1`.
    var accept1: RswiftResources.ColorResource { .init(name: "Accept1", path: [], bundle: bundle) }

    /// Color `Accept2`.
    var accept2: RswiftResources.ColorResource { .init(name: "Accept2", path: [], bundle: bundle) }

    /// Color `Accept3`.
    var accept3: RswiftResources.ColorResource { .init(name: "Accept3", path: [], bundle: bundle) }

    /// Color `CustomBlack`.
    var customBlack: RswiftResources.ColorResource { .init(name: "CustomBlack", path: [], bundle: bundle) }

    /// Color `CustomGray`.
    var customGray: RswiftResources.ColorResource { .init(name: "CustomGray", path: [], bundle: bundle) }

    /// Color `CustomWhite`.
    var customWhite: RswiftResources.ColorResource { .init(name: "CustomWhite", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 6 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Docum`.
    var docum: RswiftResources.ImageResource { .init(name: "Docum", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Image`.
    var image: RswiftResources.ImageResource { .init(name: "Image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ImageThree`.
    var imageThree: RswiftResources.ImageResource { .init(name: "ImageThree", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ImageTwo`.
    var imageTwo: RswiftResources.ImageResource { .init(name: "ImageTwo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Logo`.
    var logo: RswiftResources.ImageResource { .init(name: "Logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Vector`.
    var vector: RswiftResources.ImageResource { .init(name: "Vector", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Graphik-Bold`.
    var graphikBold: RswiftResources.FontResource { .init(name: "Graphik-Bold", bundle: bundle, filename: "GraphikBold.otf") }

    /// Font `Graphik-Medium`.
    var graphikMedium: RswiftResources.FontResource { .init(name: "Graphik-Medium", bundle: bundle, filename: "GraphikMedium.otf") }

    /// Font `Graphik-Regular`.
    var graphikRegular: RswiftResources.FontResource { .init(name: "Graphik-Regular", bundle: bundle, filename: "GraphikRegular.otf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [graphikBold, graphikMedium, graphikRegular].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 3 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GraphikBold.otf`.
    var graphikBoldOtf: RswiftResources.FileResource { .init(name: "GraphikBold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `GraphikMedium.otf`.
    var graphikMediumOtf: RswiftResources.FileResource { .init(name: "GraphikMedium", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `GraphikRegular.otf`.
    var graphikRegularOtf: RswiftResources.FileResource { .init(name: "GraphikRegular", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "Logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}
